#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>
#define _CRT_SECURE_NO_WARNINGS 1
//单链表的节点结构
typedef struct Node
{
	int x;
	int data;
	struct Node* next;
};
typedef struct Node node;
typedef struct Node *Link;
//(1)单链表的遍历操作
void displayNode(Link head)
{
	Link p = head->next;
	while (p != NULL)
	{
		printf("%d\n", p->x);
		p = p->next;
	}

}
//2.求单链表的元素个数
int length(Link head)
{
	Link p;
	int count;
	p = head->next;
	count = 0;
	while (p != NULL)
	{
		p = p->next;
		count++;
	}
	return count;
}
//3.单链表查找操作
int query(Link head, int x)
{
	Link p;
	p = head->next;
	bool found = false;
	while (p != NULL)
	{
		if (p->data == x)
		{
			printf("%d\n", x);
			found = true;
		}
		p = p->next;
	}
	return found;
}
//4.链表的插入操作
bool insertnode(Link head, int i, int x)
{
	int count;
	Link p;
	 p = head;
	count = 0;
	while (p != NULL && count < i - 1)
	{
		p = p->next;
		count++;
	}
	if (p == NULL)
		return false;
	else
	{
		Link newNode = (Link)malloc(sizeof(node));
		newNode->data = x;
		newNode->next = p->next;
		p->next = newNode;
		return true;
	}

}
//5,创建一个单链表 头插法
/*初始化头节点 head = (Link)malloc(sizeof(Node))
head->next = NULL*/
Link newlist(int a[], int n)
{
	Link head;
	head = (Link)malloc(sizeof(node));
	head->next = NULL;
	for (int i = 0; i < n; i++)
	{
		Link node = (Link)malloc(sizeof(node));
		node->data = a[i];
		node->next = head->next;
		head->next = node;
	}
	return head;
}
//6.创建一个单链表 尾插法
//Link newlist(int a[], int n)
//{
//	Link rear;
//	Link head = (Link)malloc(sizeof(node));
//	head->next = NULL;
//	rear = head;
//	for (int i = 0; i < n; i++)
//	{
//		Link node = (Link)malloc(sizeof(node));
//		node->data = a[i];
//		node->next = NULL;
//		rear->next = node;
//		rear = node;
//	}
//	rear->next = NULL;
//	return head;//创建好链表 返回头指针
//
//}
//单链表结点的删除
bool deleteNode(Link head, int i)
{

	if (head == NULL|| head->next == NULL)
	{
		return false;
	}

	node* p = head->next;
	node* q = head;
/*如果i是数据域的值 */
	while (p != NULL)
	{
		if (p->data == i)
		{
			q->next = p->next;
			free(p);
			return true;
		}
		else {
			q = p;
			p = p->next;
		}
	}
	return false;
	//for (int count = 0; p != NULL && count < i; i++)
	//{
	//	q = p;
	//	p = p->next;

	//}
	//free(p);
	//return true;
}
//释放
void freeList(Link* head) {
	Link current = *head;
	Link temp;

	while (current != NULL) {
		temp = current->next;
		free(current);
		current = temp;
	}

	// 确保链表头指针指向NULL
	*head = NULL;
}
int main() {
	Link head = NULL; // 声明并初始化头指针为 NULL

	// 创建链表并插入节点（这里仅作示例）
	insertnode(head, 0, 10); // 插入第一个节点
	insertnode(head, 1, 20);

	// 遍历并打印链表
	displayNode(head);

	// 获取链表长度
	int lengthValue = length(head);
	printf("Length of the list: %d\n", lengthValue);

	// 查找特定值
	bool found = query(head, 20);
	if (found) {
		printf("Value 20 is in the list.\n"); 
	}
	else {
		printf("Value 20 is not in the list.\n");
	}

	// 在适当的时候释放链表内存（这里省略）

	return 0;
}








#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>
#include<string.h>
#define NO_LENGTH 20
#define NAME_LENGTH 11
typedef struct Student {
	char studentNo[20];
	char studentName[11];
}st;
typedef struct Student {
	char studentNo[20];
	char studentName[11];
}st;

typedef struct node {
	struct Student data;//node结构体里面放了个Student结构体 此处是实例化 不是别名
	struct node* next;
}Node,*Link;
void myMenu() {
	printf(" * * * * * * * * * 菜     单 * * * * * * * * * *\n");
	printf("     1 增加学生记录            2 删除学生记录                     \n");
	printf("     3 查找学生记录            4 修改学生记录                     \n");
	printf("     5 统计学生人数            6 显示学生记录                     \n");
	printf("     7 退出系统                                     \n");
	printf(" * * * * * * * * * * * * * * * * * * * * * * * *\n");
}

void inputStudent(Link l)
{
	printf("请输入学生的学号: \n");
	scanf("%s", l->data.studentNo);
	printf("请输入学生的姓名:");
	scanf("%s", l->data.studentName);
	l->next = NULL;
}
void inputStudentNo(char s[], char no[])
{
	printf("请输入要%s的学生学号:", s);
	scanf("%s", no);
}
void displayNode(Link head) {
	// 填写代码，根据传入的链表head头指针，扫描链表显示所有节点的信息
	if (head == NULL || head->next == NULL)
	{
		printf("暂未录入学生记录");

	}
	Link p;
	p = head->next;
	while (p != NULL)
	{
		printf("学生信息为:\n");
		printf("学号:%s\n", p->data.studentNo);
		printf("姓名:%s\n", p->data.studentName);
		p = p->next;
	}
}
bool addNode(Link head)
{
	Link p, q;
	Link node;
	node = (Link)malloc(sizeof(Node));
	inputStudent(node); 
	q = head;
	p = head->next;
	if (head->next == NULL)
	{
		head->next = node;
	}
	else
	{
		while (p != NULL)
		{
			if (node->data.studentNo < p->data.studentNo)
			{
				q->next = node;
				node->next = p;
				return true;
			}
			else {
				q = p;
				p = p->next;
			}
		} 
		//如果没能提前退出循环 则说明之前没有插入 
		//则当前node结点的学号是最大值
		//此时插在链表最后面
		q->next = node;
	}
	return true;
}
bool delete(Link head)
{
	char no[NO_LENGTH];
	inputStudentNo("删除", no);
	if (head == NULL || head->next == NULL)
	{
		return false;
	}
	Link p, q;
	q = head;
	p = head->next;
	while (p != NULL)
	{
		if (strcmp(p->data.studentNo, no) == 0)
		{
			q->next = p->next;
			free(p);
			printf("删除成功!\n");
			return true;
		}
		else
		{
			q = p;
			p = p->next;
		}
	}
}
bool queryNode(Link head)
{
	char no[NO_LENGTH];
	inputStudentNo("查询", no);
	for (Link p = head->next; p != NULL; p = p->next)
	{
		if (strcmp(p->data.studentNo, no) == 0)
		{
			printf("查询成功!\n");
			printf("该生\n");
			printf("学号为:%s\n", p->data.studentNo);
			printf("姓名为:%s\n", p->data.studentName);
			return true;
		}
	}
	printf("查无此人");
	return false;
}
bool modifyNode(Link head)
{
	if (head == NULL || head-> next== NULL)
	{
		printf("暂无学生录入");
	}
	char no[NO_LENGTH];
	inputStudentNo("修改", no);
	for (Link p = head->next; p != NULL; p = p->next)
	{
		if (strcmp(p->data.studentNo, no) == 0)
		{
			printf("您要修改的学生信息如下 请确认\n");
			printf("学号:%s\n", p->data.studentNo);
			printf("姓名:%s\n", p->data.studentName);

			printf("修改选择(学号:1 姓名:2)\n");
			int y = 0;
			scanf("%d", &y);
			switch (y)
			{
			case 1:
				printf("请输入要修改的学号:\n");
				scanf("%s", p->data.studentNo);
				break;
			case 2:
				printf("请输入要修改的姓名:\n");
				scanf("%s", p->data.studentName);
				break;
			}
			return true;
		}
	}
	return false;
}
int countNode(Link head)
{
	int count = 0;
	for (Link p = head->next; p != NULL; p = p->next)
	{
		count++;
	}
	printf("现记录学生%d人\n ", count);
	return count;
}

void clearLink(Link head)
{
	if (head == NULL || head->next == NULL)
	{
		return;
	}
	Link q;
	Link p = head->next;
	while (p != NULL)
	{
		q = p->next;
		free(p);
		p = q;
	}
	free(head);
	printf("清除成功!\n");
}
int main()
{
	int select = 0;
	int count = 0;
	Link head;
	char no[20];
	head = (Link)malloc(sizeof(Node));
	head->next = NULL;
	while (1)
	{
		myMenu();
		scanf("%d", &select);
		switch (select)
		{
				case 1:
					if (addNode(head))
						printf("成功插入一个学生记录!\n");
					break;
				case 2:
					delete(head);
					break;
				case 3:
					queryNode(head);
					break;
				case 4:
					modifyNode(head);
					break;
				case 5:
					countNode(head);
					break;
				case 6:
					displayNode(head);
					break;
				case 7:
					clearLink(head);
					exit(0);
					break;
				default:
					printf("请输入正确的选项!\n");
					break;
		}
	}
	return 0;
}







